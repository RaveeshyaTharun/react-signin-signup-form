{"ast":null,"code":"// We need to pass an argument as `{ theme }` for PigmentCSS, but we don't want to\n// allocate more objects.\nconst arg = {\n  theme: undefined\n};\n/**\n * Memoize style function on theme.\n * Intended to be used in styled() calls that only need access to the theme.\n */\n\nexport default function memoTheme(styleFn) {\n  let lastValue;\n  let lastTheme;\n  return props => {\n    let value = lastValue;\n\n    if (value === undefined || props.theme !== lastTheme) {\n      arg.theme = props.theme;\n      value = styleFn(arg);\n      lastValue = value;\n      lastTheme = props.theme;\n    }\n\n    return value;\n  };\n}","map":{"version":3,"names":["arg","theme","undefined","memoTheme","styleFn","lastValue","lastTheme","props","value"],"sources":["D:/Final Project/Tharun/FrontEnd-BackEnd/Front-End/node_modules/@mui/material/utils/memoTheme.js"],"sourcesContent":["// We need to pass an argument as `{ theme }` for PigmentCSS, but we don't want to\n// allocate more objects.\nconst arg = {\n  theme: undefined\n};\n\n/**\n * Memoize style function on theme.\n * Intended to be used in styled() calls that only need access to the theme.\n */\nexport default function memoTheme(styleFn) {\n  let lastValue;\n  let lastTheme;\n  return props => {\n    let value = lastValue;\n    if (value === undefined || props.theme !== lastTheme) {\n      arg.theme = props.theme;\n      value = styleFn(arg);\n      lastValue = value;\n      lastTheme = props.theme;\n    }\n    return value;\n  };\n}"],"mappings":"AAAA;AACA;AACA,MAAMA,GAAG,GAAG;EACVC,KAAK,EAAEC;AADG,CAAZ;AAIA;AACA;AACA;AACA;;AACA,eAAe,SAASC,SAAT,CAAmBC,OAAnB,EAA4B;EACzC,IAAIC,SAAJ;EACA,IAAIC,SAAJ;EACA,OAAOC,KAAK,IAAI;IACd,IAAIC,KAAK,GAAGH,SAAZ;;IACA,IAAIG,KAAK,KAAKN,SAAV,IAAuBK,KAAK,CAACN,KAAN,KAAgBK,SAA3C,EAAsD;MACpDN,GAAG,CAACC,KAAJ,GAAYM,KAAK,CAACN,KAAlB;MACAO,KAAK,GAAGJ,OAAO,CAACJ,GAAD,CAAf;MACAK,SAAS,GAAGG,KAAZ;MACAF,SAAS,GAAGC,KAAK,CAACN,KAAlB;IACD;;IACD,OAAOO,KAAP;EACD,CATD;AAUD"},"metadata":{},"sourceType":"module"}