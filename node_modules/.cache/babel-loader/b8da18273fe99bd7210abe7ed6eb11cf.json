{"ast":null,"code":"'use client';\n/* eslint-disable no-constant-condition */\n\nimport * as React from 'react';\nimport { unstable_setRef as setRef, unstable_useEventCallback as useEventCallback, unstable_useControlled as useControlled, unstable_useId as useId, usePreviousProps } from '@mui/utils'; // https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\n\nfunction stripDiacritics(string) {\n  return string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\n\nexport function createFilterOptions() {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, _ref) => {\n    let {\n      inputValue,\n      getOptionLabel\n    } = _ref;\n    let input = trim ? inputValue.trim() : inputValue;\n\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n\n      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\nconst defaultFilterOptions = createFilterOptions(); // Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\n\nconst pageSize = 5;\n\nconst defaultIsActiveElementInListbox = listboxRef => listboxRef.current !== null && listboxRef.current.parentElement?.contains(document.activeElement);\n\nconst MULTIPLE_DEFAULT_VALUE = [];\n\nfunction useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? MULTIPLE_DEFAULT_VALUE : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp = option => option.label ?? option,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n\n      return String(optionLabel);\n    }\n\n    return optionLabel;\n  };\n\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue, reason) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n\n    let newInputValue;\n\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n\n    if (inputValue === newInputValue) {\n      return;\n    }\n\n    setInputValueState(newInputValue);\n\n    if (onInputChange) {\n      onInputChange(event, newInputValue, reason);\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n\n    return true;\n  }), // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = usePreviousProps({\n    filteredOptions,\n    value,\n    inputValue\n  });\n  React.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n\n    if (focused && !valueChange) {\n      return;\n    } // Only reset the input's value when freeSolo if the component's value changes.\n\n\n    if (freeSolo && !valueChange) {\n      return;\n    }\n\n    resetInputValue(null, value, 'reset');\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  }); // Ensure the focusedTag is never inconsistent\n\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {\n      return -1;\n    }\n\n    let nextFocus = index;\n\n    while (true) {\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`); // Same logic as MenuList.js\n\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n\n      if (option && option.hasAttribute('tabindex') && !nextFocusDisabled) {\n        // The next option is available\n        return nextFocus;\n      } // The next option is disabled, move to the next element.\n      // with looped index\n\n\n      if (direction === 'next') {\n        nextFocus = (nextFocus + 1) % filteredOptions.length;\n      } else {\n        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;\n      } // We end up with initial index, that means we don't have available options.\n      // All of them are disabled\n\n\n      if (nextFocus === index) {\n        return -1;\n      }\n    }\n  }\n\n  const setHighlightedIndex = useEventCallback(_ref2 => {\n    let {\n      event,\n      index,\n      reason = 'auto'\n    } = _ref2;\n    highlightedIndexRef.current = index; // does the index exist?\n\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n\n    if (!listboxRef.current) {\n      return;\n    }\n\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    let listboxNode = listboxRef.current;\n\n    if (listboxRef.current.getAttribute('role') !== 'listbox') {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    } // \"No results\"\n\n\n    if (!listboxNode) {\n      return;\n    }\n\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n\n    if (!option) {\n      return;\n    }\n\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    } // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    // In case of mouse clicks and touch (in mobile devices) we avoid scrolling the element and keep both behaviors same.\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n\n\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse' && reason !== 'touch') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(_ref3 => {\n    let {\n      event,\n      diff,\n      direction = 'next',\n      reason = 'auto'\n    } = _ref3;\n\n    if (!popupOpen) {\n      return;\n    }\n\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n\n      if (diff === 'start') {\n        return 0;\n      }\n\n      if (diff === 'end') {\n        return maxIndex;\n      }\n\n      const newIndex = highlightedIndexRef.current + diff;\n\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n\n        return maxIndex;\n      }\n\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n\n        return 0;\n      }\n\n      return newIndex;\n    };\n\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    }); // Sync the content of the input with the highlighted option.\n\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option; // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n\n  const getPreviousHighlightedOptionIndex = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : '';\n      const label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n\n      if (previousHighlightedOption) {\n        return filteredOptions.findIndex(option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n      }\n    }\n\n    return -1;\n  };\n\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    } // Check if the previously highlighted option still exists in the updated filtered options list and if the value and inputValue haven't changed\n    // If it exists and the value and the inputValue haven't changed, just update its index, otherwise continue execution\n\n\n    const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();\n\n    if (previousHighlightedOptionIndex !== -1) {\n      highlightedIndexRef.current = previousHighlightedOptionIndex;\n      return;\n    }\n\n    const valueItem = multiple ? value[0] : value; // The popup is empty, reset\n\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n\n    if (!listboxRef.current) {\n      return;\n    } // Synchronize the value with the highlighted index\n\n\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current]; // Keep the current highlighted index if possible\n\n      if (multiple && currentOption && value.findIndex(val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n\n      const itemIndex = filteredOptions.findIndex(optionItem => isOptionEqualToValue(optionItem, valueItem));\n\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n\n      return;\n    } // Prevent the highlighted index to leak outside the boundaries.\n\n\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    } // Restore the focus to the previous index.\n\n\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    }); // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [// Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length, // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n\n    if (!node) {\n      return;\n    }\n\n    syncHighlightedIndex();\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n\n    setOpenState(true);\n    setInputPristine(true);\n\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n\n    setOpenState(false);\n\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n\n    setValueState(newValue);\n  };\n\n  const isTouch = React.useRef(false);\n\n  const selectNewValue = function (event, option) {\n    let reasonProp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'selectOption';\n    let origin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'options';\n    let reason = reasonProp;\n    let newValue = option;\n\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n\n      const itemIndex = newValue.findIndex(valueItem => isOptionEqualToValue(option, valueItem));\n\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n\n    resetInputValue(event, newValue, reason);\n    handleValue(event, newValue, reason, {\n      option\n    });\n\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n\n    let nextFocus = index;\n\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`); // Same logic as MenuList.js\n\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n\n    let nextTag = focusedTag;\n\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    } // Wait until IME is settled.\n\n\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n\n          break;\n\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n\n          break;\n\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false; // Avoid early form validation, let the end-users continue filling the form.\n\n            event.preventDefault();\n\n            if (disabled) {\n              return;\n            }\n\n            selectNewValue(event, option, 'selectOption'); // Move the selection to the end.\n\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n\n          break;\n\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault(); // Avoid the Modal to handle the event.\n\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault(); // Avoid the Modal to handle the event.\n\n            event.stopPropagation();\n            handleClear(event);\n          }\n\n          break;\n\n        case 'Backspace':\n          // Remove the value on the left of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n\n          break;\n\n        case 'Delete':\n          // Remove the value on the right of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {\n            const index = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n\n          break;\n\n        default:\n      }\n    }\n  };\n\n  const handleFocus = event => {\n    setFocused(true);\n\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value, 'blur');\n    }\n\n    handleClose(event, 'blur');\n  };\n\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  const handleOptionMouseMove = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n\n    if (highlightedIndexRef.current !== index) {\n      setHighlightedIndex({\n        event,\n        index,\n        reason: 'mouse'\n      });\n    }\n  };\n\n  const handleOptionTouchStart = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  }; // Prevent input blur when interacting with the combobox\n\n\n  const handleMouseDown = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  }; // Focus the input when interacting with the combobox\n\n\n  const handleClick = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    inputRef.current.focus();\n\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n\n    firstFocus.current = false;\n  };\n\n  const handleInputMouseDown = event => {\n    if (!disabledProp && (inputValue === '' || !open)) {\n      handlePopupIndicator(event);\n    }\n  };\n\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n\n          indexBy.set(group, true);\n        }\n\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n\n      return acc;\n    }, []);\n  }\n\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n\n  return {\n    getRootProps: function () {\n      let other = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        'aria-owns': listboxAvailable ? `${id}-listbox` : null,\n        ...other,\n        onKeyDown: handleKeyDown(other),\n        onMouseDown: handleMouseDown,\n        onClick: handleClick\n      };\n    },\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox',\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: _ref4 => {\n      let {\n        index\n      } = _ref4;\n      return {\n        key: index,\n        'data-tag-index': index,\n        tabIndex: -1,\n        ...(!readOnly && {\n          onDelete: handleTagDelete(index)\n        })\n      };\n    },\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: _ref5 => {\n      let {\n        index,\n        option\n      } = _ref5;\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionKey?.(option) ?? getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}\n\nexport default useAutocomplete;","map":{"version":3,"names":["React","unstable_setRef","setRef","unstable_useEventCallback","useEventCallback","unstable_useControlled","useControlled","unstable_useId","useId","usePreviousProps","stripDiacritics","string","normalize","replace","createFilterOptions","config","ignoreAccents","ignoreCase","limit","matchFrom","stringify","trim","options","inputValue","getOptionLabel","input","toLowerCase","filteredOptions","filter","option","candidate","indexOf","slice","defaultFilterOptions","pageSize","defaultIsActiveElementInListbox","listboxRef","current","parentElement","contains","document","activeElement","MULTIPLE_DEFAULT_VALUE","useAutocomplete","props","unstable_isActiveElementInListbox","unstable_classNamePrefix","autoComplete","autoHighlight","autoSelect","blurOnSelect","clearOnBlur","freeSolo","clearOnEscape","componentName","defaultValue","multiple","disableClearable","disableCloseOnSelect","disabled","disabledProp","disabledItemsFocusable","disableListWrap","filterOptions","filterSelectedOptions","getOptionDisabled","getOptionKey","getOptionLabelProp","label","groupBy","handleHomeEndKeys","id","idProp","includeInputInList","inputValueProp","isOptionEqualToValue","value","onChange","onClose","onHighlightChange","onInputChange","onOpen","open","openProp","openOnFocus","readOnly","selectOnFocus","valueProp","optionLabel","process","env","NODE_ENV","erroneousReturn","undefined","console","error","JSON","String","ignoreFocus","useRef","firstFocus","inputRef","anchorEl","setAnchorEl","useState","focusedTag","setFocusedTag","defaultHighlighted","highlightedIndexRef","setValueState","controlled","default","name","setInputValueState","state","focused","setFocused","resetInputValue","useCallback","event","newValue","reason","isOptionSelected","length","newInputValue","setOpenState","inputPristine","setInputPristine","inputValueIsSelectedValue","popupOpen","some","value2","previousProps","useEffect","valueChange","listboxAvailable","focusTag","tagToFocus","focus","querySelector","validOptionIndex","index","direction","nextFocus","nextFocusDisabled","getAttribute","hasAttribute","setHighlightedIndex","removeAttribute","setAttribute","prev","classList","remove","listboxNode","scrollTop","add","scrollHeight","clientHeight","element","scrollBottom","elementBottom","offsetTop","offsetHeight","changeHighlightedIndex","diff","getNextIndex","maxIndex","newIndex","Math","abs","nextIndex","setSelectionRange","getPreviousHighlightedOptionIndex","isSameValue","value1","label1","label2","every","val","i","previousHighlightedOption","findIndex","syncHighlightedIndex","previousHighlightedOptionIndex","valueItem","currentOption","itemIndex","optionItem","handleListboxRef","node","nodeName","warn","join","handleOpen","handleClose","handleValue","details","isTouch","selectNewValue","reasonProp","origin","Array","isArray","matches","push","splice","ctrlKey","metaKey","blur","validTagIndex","handleFocusTag","nextTag","handleClear","handleKeyDown","other","onKeyDown","defaultMuiPrevented","key","which","preventDefault","stopPropagation","handleFocus","handleBlur","handleInputChange","target","handleOptionMouseMove","Number","currentTarget","handleOptionTouchStart","handleOptionClick","handleTagDelete","handlePopupIndicator","handleMouseDown","handleClick","selectionEnd","selectionStart","select","handleInputMouseDown","dirty","groupedOptions","indexBy","Map","reduce","acc","group","get","set","getRootProps","onMouseDown","onClick","getInputLabelProps","htmlFor","getInputProps","onBlur","onFocus","ref","autoCapitalize","spellCheck","role","getClearProps","tabIndex","type","getPopupIndicatorProps","getTagProps","onDelete","getListboxProps","getOptionProps","selected","onMouseMove","onTouchStart","expanded"],"sources":["E:/Final Project/Tharun/FrontEnd-BackEnd/Front-End/node_modules/@mui/material/useAutocomplete/useAutocomplete.js"],"sourcesContent":["'use client';\n\n/* eslint-disable no-constant-condition */\nimport * as React from 'react';\nimport { unstable_setRef as setRef, unstable_useEventCallback as useEventCallback, unstable_useControlled as useControlled, unstable_useId as useId, usePreviousProps } from '@mui/utils';\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\nfunction stripDiacritics(string) {\n  return string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\nexport function createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\nconst pageSize = 5;\nconst defaultIsActiveElementInListbox = listboxRef => listboxRef.current !== null && listboxRef.current.parentElement?.contains(document.activeElement);\nconst MULTIPLE_DEFAULT_VALUE = [];\nfunction useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? MULTIPLE_DEFAULT_VALUE : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp = option => option.label ?? option,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue, reason) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    let newInputValue;\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, reason);\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = usePreviousProps({\n    filteredOptions,\n    value,\n    inputValue\n  });\n  React.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value, 'reset');\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  });\n\n  // Ensure the focusedTag is never inconsistent\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && option.hasAttribute('tabindex') && !nextFocusDisabled) {\n        // The next option is available\n        return nextFocus;\n      }\n\n      // The next option is disabled, move to the next element.\n      // with looped index\n      if (direction === 'next') {\n        nextFocus = (nextFocus + 1) % filteredOptions.length;\n      } else {\n        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;\n      }\n\n      // We end up with initial index, that means we don't have available options.\n      // All of them are disabled\n      if (nextFocus === index) {\n        return -1;\n      }\n    }\n  }\n  const setHighlightedIndex = useEventCallback(({\n    event,\n    index,\n    reason = 'auto'\n  }) => {\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    let listboxNode = listboxRef.current;\n    if (listboxRef.current.getAttribute('role') !== 'listbox') {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    }\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    // In case of mouse clicks and touch (in mobile devices) we avoid scrolling the element and keep both behaviors same.\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse' && reason !== 'touch') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(({\n    event,\n    diff,\n    direction = 'next',\n    reason = 'auto'\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const getPreviousHighlightedOptionIndex = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : '';\n      const label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        return filteredOptions.findIndex(option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n      }\n    }\n    return -1;\n  };\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    // Check if the previously highlighted option still exists in the updated filtered options list and if the value and inputValue haven't changed\n    // If it exists and the value and the inputValue haven't changed, just update its index, otherwise continue execution\n    const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();\n    if (previousHighlightedOptionIndex !== -1) {\n      highlightedIndexRef.current = previousHighlightedOptionIndex;\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && value.findIndex(val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = filteredOptions.findIndex(optionItem => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React.useRef(false);\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n      const itemIndex = newValue.findIndex(valueItem => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue, reason);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    let nextTag = focusedTag;\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n\n    // Wait until IME is settled.\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            // Avoid early form validation, let the end-users continue filling the form.\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, 'selectOption');\n\n            // Move the selection to the end.\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n          break;\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case 'Backspace':\n          // Remove the value on the left of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        case 'Delete':\n          // Remove the value on the right of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {\n            const index = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = event => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value, 'blur');\n    }\n    handleClose(event, 'blur');\n  };\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseMove = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    if (highlightedIndexRef.current !== index) {\n      setHighlightedIndex({\n        event,\n        index,\n        reason: 'mouse'\n      });\n    }\n  };\n  const handleOptionTouchStart = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  const handleMouseDown = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  const handleClick = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = event => {\n    if (!disabledProp && (inputValue === '' || !open)) {\n      handlePopupIndicator(event);\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: (other = {}) => ({\n      'aria-owns': listboxAvailable ? `${id}-listbox` : null,\n      ...other,\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox',\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: ({\n      index\n    }) => ({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1,\n      ...(!readOnly && {\n        onDelete: handleTagDelete(index)\n      })\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionKey?.(option) ?? getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}\nexport default useAutocomplete;"],"mappings":"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"},"metadata":{},"sourceType":"module"}