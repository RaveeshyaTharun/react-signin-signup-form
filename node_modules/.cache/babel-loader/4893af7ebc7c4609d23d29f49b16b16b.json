{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from \"../ThemeProvider/index.js\";\nimport InitColorSchemeScript, { DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nimport useCurrentColorScheme from \"./useCurrentColorScheme.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n\n    /**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */\n    theme: defaultTheme = {},\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    defaultColorScheme,\n    resolveTheme\n  } = options;\n  const defaultContext = {\n    allColorSchemes: [],\n    colorScheme: undefined,\n    darkColorScheme: undefined,\n    lightColorScheme: undefined,\n    mode: undefined,\n    setColorScheme: () => {},\n    setMode: () => {},\n    systemMode: undefined\n  };\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n\n  const useColorScheme = () => React.useContext(ColorSchemeContext) || defaultContext;\n\n  function CssVarsProvider(props) {\n    const {\n      children,\n      theme: themeProp,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false\n    } = props;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const initialTheme = React.useMemo(() => {\n      if (themeProp) {\n        return themeProp;\n      }\n\n      return typeof defaultTheme === 'function' ? defaultTheme() : defaultTheme;\n    }, [themeProp]);\n    const scopedTheme = initialTheme[themeId];\n    const {\n      colorSchemes = {},\n      components = {},\n      cssVarPrefix,\n      ...restThemeProp\n    } = scopedTheme || initialTheme;\n    const joinedColorSchemes = Object.keys(colorSchemes).filter(k => !!colorSchemes[k]).join(',');\n    const allColorSchemes = React.useMemo(() => joinedColorSchemes.split(','), [joinedColorSchemes]);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const defaultMode = colorSchemes[defaultLightColorScheme] && colorSchemes[defaultDarkColorScheme] ? 'system' : colorSchemes[restThemeProp.defaultColorScheme]?.palette?.mode || restThemeProp.palette?.mode; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    } // `colorScheme` is undefined on the server and hydration phase\n\n\n    const calculatedColorScheme = colorScheme || restThemeProp.defaultColorScheme; // 2. get the `vars` object that refers to the CSS custom properties\n\n    const themeVars = restThemeProp.generateThemeVars?.() || restThemeProp.vars; // 3. Start composing the theme object\n\n    const theme = { ...restThemeProp,\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: themeVars\n    };\n\n    if (typeof theme.generateSpacing === 'function') {\n      theme.spacing = theme.generateSpacing();\n    } // 4. Resolve the color scheme and merge it to the theme\n\n\n    if (calculatedColorScheme) {\n      const scheme = colorSchemes[calculatedColorScheme];\n\n      if (scheme && typeof scheme === 'object') {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = { ...theme[schemeKey],\n              ...scheme[schemeKey]\n            };\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n      }\n    } // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n\n    const colorSchemeSelector = restThemeProp.colorSchemeSelector;\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode && colorSchemeSelector && colorSchemeSelector !== 'media') {\n        const selector = colorSchemeSelector;\n        let rule = colorSchemeSelector;\n\n        if (selector === 'class') {\n          rule = `.%s`;\n        }\n\n        if (selector === 'data') {\n          rule = `[data-%s]`;\n        }\n\n        if (selector?.startsWith('data-') && !selector.includes('%s')) {\n          // 'data-mui-color-scheme' -> '[data-mui-color-scheme=\"%s\"]'\n          rule = `[${selector}=\"%s\"]`;\n        }\n\n        if (rule.startsWith('.')) {\n          colorSchemeNode.classList.remove(...allColorSchemes.map(scheme => rule.substring(1).replace('%s', scheme)));\n          colorSchemeNode.classList.add(rule.substring(1).replace('%s', colorScheme));\n        } else {\n          const matches = rule.replace('%s', colorScheme).match(/\\[([^\\]]+)\\]/);\n\n          if (matches) {\n            const [attr, value] = matches[1].split('=');\n\n            if (!value) {\n              // for attributes like `data-theme-dark`, `data-theme-light`\n              // remove all the existing data attributes before setting the new one\n              allColorSchemes.forEach(scheme => {\n                colorSchemeNode.removeAttribute(attr.replace(colorScheme, scheme));\n              });\n            }\n\n            colorSchemeNode.setAttribute(attr, value ? value.replace(/\"|'/g, '') : '');\n          } else {\n            colorSchemeNode.setAttribute(rule, colorScheme);\n          }\n        }\n      }\n    }, [colorScheme, colorSchemeSelector, colorSchemeNode, allColorSchemes]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      allColorSchemes,\n      colorScheme,\n      darkColorScheme,\n      lightColorScheme,\n      mode,\n      setColorScheme,\n      setMode,\n      systemMode\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n\n    if (disableStyleSheetGeneration || restThemeProp.cssVariables === false || nested && upperTheme?.cssVarPrefix === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsx(React.Fragment, {\n        children: (theme.generateStyleSheets?.() || []).map((styles, index) => /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: styles\n        }, index))\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n\n    if (nested) {\n      return element;\n    }\n\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to.\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n  const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n  const getInitColorSchemeScript = params => InitColorSchemeScript({\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey,\n    ...params\n  });\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["React","PropTypes","GlobalStyles","useTheme","muiUseTheme","ThemeProvider","InitColorSchemeScript","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","themeId","theme","defaultTheme","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","disableTransitionOnChange","designSystemTransitionOnChange","defaultColorScheme","resolveTheme","defaultContext","allColorSchemes","colorScheme","undefined","darkColorScheme","lightColorScheme","mode","setColorScheme","setMode","systemMode","ColorSchemeContext","createContext","process","env","NODE_ENV","displayName","useColorScheme","useContext","CssVarsProvider","props","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","disableNestedContext","disableStyleSheetGeneration","hasMounted","useRef","upperTheme","ctx","nested","initialTheme","useMemo","scopedTheme","colorSchemes","components","cssVarPrefix","restThemeProp","joinedColorSchemes","Object","keys","filter","k","join","split","defaultLightColorScheme","light","defaultDarkColorScheme","dark","defaultMode","palette","stateMode","stateColorScheme","supportedColorSchemes","calculatedColorScheme","themeVars","generateThemeVars","vars","generateSpacing","spacing","scheme","forEach","schemeKey","colorSchemeSelector","useEffect","selector","rule","startsWith","includes","classList","remove","map","substring","replace","add","matches","match","attr","value","removeAttribute","setAttribute","timer","current","css","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","shouldGenerateStyleSheet","cssVariables","element","Fragment","generateStyleSheets","styles","index","Provider","propTypes","node","any","string","bool","object","getInitColorSchemeScript","params"],"sources":["E:/Final Project/Tharun/FrontEnd-BackEnd/Front-End/node_modules/@mui/system/cssVars/createCssVarsProvider.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from \"../ThemeProvider/index.js\";\nimport InitColorSchemeScript, { DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nimport useCurrentColorScheme from \"./useCurrentColorScheme.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n    /**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */\n    theme: defaultTheme = {},\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    defaultColorScheme,\n    resolveTheme\n  } = options;\n  const defaultContext = {\n    allColorSchemes: [],\n    colorScheme: undefined,\n    darkColorScheme: undefined,\n    lightColorScheme: undefined,\n    mode: undefined,\n    setColorScheme: () => {},\n    setMode: () => {},\n    systemMode: undefined\n  };\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n  const useColorScheme = () => React.useContext(ColorSchemeContext) || defaultContext;\n  function CssVarsProvider(props) {\n    const {\n      children,\n      theme: themeProp,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false\n    } = props;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const initialTheme = React.useMemo(() => {\n      if (themeProp) {\n        return themeProp;\n      }\n      return typeof defaultTheme === 'function' ? defaultTheme() : defaultTheme;\n    }, [themeProp]);\n    const scopedTheme = initialTheme[themeId];\n    const {\n      colorSchemes = {},\n      components = {},\n      cssVarPrefix,\n      ...restThemeProp\n    } = scopedTheme || initialTheme;\n    const joinedColorSchemes = Object.keys(colorSchemes).filter(k => !!colorSchemes[k]).join(',');\n    const allColorSchemes = React.useMemo(() => joinedColorSchemes.split(','), [joinedColorSchemes]);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const defaultMode = colorSchemes[defaultLightColorScheme] && colorSchemes[defaultDarkColorScheme] ? 'system' : colorSchemes[restThemeProp.defaultColorScheme]?.palette?.mode || restThemeProp.palette?.mode;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n\n    // `colorScheme` is undefined on the server and hydration phase\n    const calculatedColorScheme = colorScheme || restThemeProp.defaultColorScheme;\n\n    // 2. get the `vars` object that refers to the CSS custom properties\n    const themeVars = restThemeProp.generateThemeVars?.() || restThemeProp.vars;\n\n    // 3. Start composing the theme object\n    const theme = {\n      ...restThemeProp,\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: themeVars\n    };\n    if (typeof theme.generateSpacing === 'function') {\n      theme.spacing = theme.generateSpacing();\n    }\n\n    // 4. Resolve the color scheme and merge it to the theme\n    if (calculatedColorScheme) {\n      const scheme = colorSchemes[calculatedColorScheme];\n      if (scheme && typeof scheme === 'object') {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = {\n              ...theme[schemeKey],\n              ...scheme[schemeKey]\n            };\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n      }\n    }\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    const colorSchemeSelector = restThemeProp.colorSchemeSelector;\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode && colorSchemeSelector && colorSchemeSelector !== 'media') {\n        const selector = colorSchemeSelector;\n        let rule = colorSchemeSelector;\n        if (selector === 'class') {\n          rule = `.%s`;\n        }\n        if (selector === 'data') {\n          rule = `[data-%s]`;\n        }\n        if (selector?.startsWith('data-') && !selector.includes('%s')) {\n          // 'data-mui-color-scheme' -> '[data-mui-color-scheme=\"%s\"]'\n          rule = `[${selector}=\"%s\"]`;\n        }\n        if (rule.startsWith('.')) {\n          colorSchemeNode.classList.remove(...allColorSchemes.map(scheme => rule.substring(1).replace('%s', scheme)));\n          colorSchemeNode.classList.add(rule.substring(1).replace('%s', colorScheme));\n        } else {\n          const matches = rule.replace('%s', colorScheme).match(/\\[([^\\]]+)\\]/);\n          if (matches) {\n            const [attr, value] = matches[1].split('=');\n            if (!value) {\n              // for attributes like `data-theme-dark`, `data-theme-light`\n              // remove all the existing data attributes before setting the new one\n              allColorSchemes.forEach(scheme => {\n                colorSchemeNode.removeAttribute(attr.replace(colorScheme, scheme));\n              });\n            }\n            colorSchemeNode.setAttribute(attr, value ? value.replace(/\"|'/g, '') : '');\n          } else {\n            colorSchemeNode.setAttribute(rule, colorScheme);\n          }\n        }\n      }\n    }, [colorScheme, colorSchemeSelector, colorSchemeNode, allColorSchemes]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      allColorSchemes,\n      colorScheme,\n      darkColorScheme,\n      lightColorScheme,\n      mode,\n      setColorScheme,\n      setMode,\n      systemMode\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || restThemeProp.cssVariables === false || nested && upperTheme?.cssVarPrefix === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsx(React.Fragment, {\n        children: (theme.generateStyleSheets?.() || []).map((styles, index) => /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: styles\n        }, index))\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to.\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n  const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n  const getInitColorSchemeScript = params => InitColorSchemeScript({\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey,\n    ...params\n  });\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}